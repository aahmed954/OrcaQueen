# HAProxy Configuration - ARM64 Oracle Cloud Optimized
# Load balancing and high availability for LiteLLM Gateway

global
    # ARM64 optimizations
    maxconn 4096
    nbthread 4                    # Match ARM64 core count
    cpu-map auto:1/1-4 0-3       # CPU affinity for ARM64 cores

    # Logging
    log stdout local0
    log-tag haproxy

    # Security
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+AES256:ECDHE+AES128:!PSK:!DHE:!RSA:!DSS:!aNull:!MD5
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    tune.ssl.default-dh-param 2048

    # Performance tuning for ARM64
    tune.bufsize 32768
    tune.maxrewrite 16384
    tune.recv_enough 16384
    tune.sndbuf.client 32768
    tune.sndbuf.server 32768
    tune.rcvbuf.client 32768
    tune.rcvbuf.server 32768

    # Connection tuning
    tune.http.maxhdr 101
    tune.comp.maxlevel 5

    # Process management
    master-worker
    pidfile /var/run/haproxy.pid

    # Statistics
    stats socket /var/run/haproxy.sock mode 660 level admin
    stats timeout 30s

    # User/Group
    user haproxy
    group haproxy

    # Chroot for security
    # chroot /var/lib/haproxy

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option http-server-close
    option redispatch
    retries 3

    # Timeouts optimized for API Gateway
    timeout connect 10s
    timeout client 600s           # Long timeout for streaming responses
    timeout server 600s           # Match LiteLLM timeout
    timeout http-request 15s
    timeout queue 60s
    timeout check 10s
    timeout http-keep-alive 30s

    # Error handling
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

    # Compression
    compression algo gzip
    compression type text/html text/plain text/css application/json application/javascript

# Statistics Dashboard
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats show-node
    stats show-legends
    stats show-desc LiteLLM Gateway Load Balancer - ARM64 Oracle Cloud
    stats auth admin:${HAPROXY_STATS_PASSWORD:-admin}

# Frontend - API Gateway
frontend api_gateway
    bind *:8080

    # ARM64 optimized settings
    maxconn 2048

    # Request rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }

    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"

    # Request ID for tracing
    unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
    unique-id-header X-Request-ID

    # Logging
    capture request header Host len 32
    capture request header User-Agent len 64
    capture request header X-Request-ID len 64
    capture response header Content-Type len 32
    capture response header X-Response-Time len 10

    # Path-based routing
    acl is_health path_beg /health
    acl is_metrics path_beg /metrics
    acl is_api path_beg /v1
    acl is_admin path_beg /admin
    acl is_docs path_beg /docs

    # Use backend based on ACL
    use_backend health_check if is_health
    use_backend metrics_backend if is_metrics
    use_backend admin_backend if is_admin
    use_backend docs_backend if is_docs
    default_backend litellm_backend

# Backend - LiteLLM Gateway Cluster
backend litellm_backend
    balance leastconn              # Best for long-running connections

    # Health checking
    option httpchk GET /health
    http-check expect status 200

    # Connection pooling
    http-reuse safe

    # Retry policy
    retry-on all-retryable-errors
    http-request disable-l7-retry if METH_POST  # Don't retry POSTs

    # Circuit breaker
    option allbackups

    # Session stickiness for streaming
    cookie SERVERID insert indirect nocache

    # Load balancing algorithm optimizations
    hash-type consistent

    # Request queuing
    maxconn 1000
    fullconn 50

    # Servers (scale horizontally by adding more)
    server litellm1 litellm:4000 check inter 5s rise 2 fall 3 maxconn 250 cookie s1
    # server litellm2 litellm2:4000 check inter 5s rise 2 fall 3 maxconn 250 cookie s2
    # server litellm3 litellm3:4000 check inter 5s rise 2 fall 3 maxconn 250 cookie s3

    # Backup server (optional)
    # server litellm_backup litellm_backup:4000 backup check inter 5s rise 2 fall 3

# Backend - Health Check
backend health_check
    option httpchk GET /health
    http-check expect status 200
    server litellm1 litellm:4000 check

# Backend - Metrics
backend metrics_backend
    server litellm1 litellm:4000

# Backend - Admin
backend admin_backend
    # Add authentication for admin endpoints
    acl valid_admin_auth http_auth(admin_users)
    http-request deny if !valid_admin_auth
    server litellm1 litellm:4000

# Backend - Documentation
backend docs_backend
    server litellm1 litellm:4000

# User list for admin authentication
userlist admin_users
    user admin password ${HAPROXY_ADMIN_PASSWORD:-$2y$10$YourHashedPasswordHere}

# Additional optimization for ARM64
listen litellm_direct
    bind *:4001
    mode tcp
    option tcplog
    timeout client 600s
    timeout server 600s
    server litellm1 litellm:4000 check