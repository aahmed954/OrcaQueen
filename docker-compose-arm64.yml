# ARM64 DEPLOYMENT READY - AI SWARM ORACLE CLOUD FREE TIER
# Optimized for 4-core ARM64 (Ampere A1) with 24GB RAM
# All services tested and verified for ARM64 compatibility

version: '3.8'

services:
  # PostgreSQL - ARM64 native
  postgres:
    image: postgres:15-alpine
    platform: linux/arm64
    container_name: oracle-postgres-arm64
    restart: always
    user: "postgres:postgres"
    environment:
      POSTGRES_DB: litellm_db
      POSTGRES_USER: litellm_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U litellm_user -d litellm_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis - ARM64 native
  redis:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: oracle-redis-arm64
    restart: always
    user: "redis:redis"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # LiteLLM Proxy - ARM64 compatible
  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    platform: linux/arm64
    container_name: oracle-litellm-arm64
    restart: always
    user: "1000:1000"
    ports:
      - "0.0.0.0:4000:4000"
    environment:
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY}
      DATABASE_URL: postgresql://litellm_user:${POSTGRES_PASSWORD}@postgres:5432/litellm_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      LITELLM_LOG_LEVEL: INFO
      LITELLM_CACHE: redis
      LITELLM_CACHE_PARAMS: '{"host": "redis", "port": 6379, "password": "${REDIS_PASSWORD}"}'
      LITELLM_DROP_PARAMS: true
      LITELLM_SUCCESS_CALLBACK: ["redis"]
      LITELLM_FAILURE_CALLBACK: ["redis"]
      # ARM64 optimizations
      WORKERS: 2
      MAX_CONCURRENT_REQUESTS: 100
    volumes:
      - ./config/litellm-arm64.yaml:/app/config.yaml:ro
      - litellm_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.5'
        reservations:
          memory: 2G
          cpus: '0.75'

  # Open WebUI - ARM64 compatible
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    platform: linux/arm64
    container_name: oracle-openwebui-arm64
    restart: always
    user: "1000:1000"
    ports:
      - "0.0.0.0:3000:8080"
    environment:
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY}
      OPENAI_API_BASE_URL: http://litellm:4000/v1
      OPENAI_API_KEY: ${LITELLM_MASTER_KEY}
      ENABLE_OLLAMA_API: false
      ENABLE_OPENAI_API: true
      ENABLE_SIGNUP: false
      ENABLE_COMMUNITY_SHARING: false
      WEBUI_AUTH: true
      DEFAULT_MODELS: "gemini-2.0-flash-exp,deepseek-v3,grok-beta"
      DEFAULT_USER_ROLE: user
      ADMIN_EMAIL: admin@ai-swarm.local
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      JWT_EXPIRES_IN: 86400
      ENABLE_API_KEY: true
      WEBUI_SESSION_COOKIE_SAME_SITE: lax
      WEBUI_SESSION_COOKIE_SECURE: false
      # ARM64 optimizations
      WORKERS: 2
      PRELOAD_SIZE: 1
    volumes:
      - openwebui_data:/app/backend/data
      - ./config/openwebui-arm64:/app/backend/data/config:rw
    depends_on:
      litellm:
        condition: service_healthy
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 15s
      retries: 5
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.5'
        reservations:
          memory: 2G
          cpus: '0.75'

  # CPU Inference Server - ARM64 optimized
  cpu-inference:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim-bookworm
        WORKDIR /app
        RUN apt-get update && apt-get install -y \
            curl \
            && rm -rf /var/lib/apt/lists/*
        COPY requirements-cpu.txt .
        RUN pip install --no-cache-dir -r requirements-cpu.txt
        COPY cpu_inference_server.py .
        EXPOSE 8000
        USER 1000:1000
        CMD ["python", "cpu_inference_server.py"]
    platform: linux/arm64
    container_name: oracle-cpu-inference-arm64
    restart: always
    user: "1000:1000"
    ports:
      - "127.0.0.1:8001:8000"
    environment:
      MODEL_NAME: microsoft/DialoGPT-small
      DEVICE: cpu
      PORT: 8000
      WORKERS: 2
      MAX_REQUESTS: 50
      PYTHONUNBUFFERED: 1
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Nginx Reverse Proxy - ARM64 native
  nginx:
    image: nginx:alpine
    platform: linux/arm64
    container_name: oracle-nginx-arm64
    restart: always
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    volumes:
      - ./config/nginx-arm64.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - open-webui
      - litellm
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus - System monitoring (ARM64 native)
  prometheus:
    image: prom/prometheus:latest
    platform: linux/arm64
    container_name: oracle-prometheus-arm64
    restart: always
    user: "nobody:nobody"
    ports:
      - "127.0.0.1:9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.retention.size=2GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./config/prometheus-arm64.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana - Monitoring dashboard (ARM64 native)
  grafana:
    image: grafana/grafana:latest
    platform: linux/arm64
    container_name: oracle-grafana-arm64
    restart: always
    user: "472:472"
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource,prometheus
      GF_SERVER_ROOT_URL: http://localhost:3001
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-arm64:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Node Exporter - System metrics (ARM64 native)
  node-exporter:
    image: prom/node-exporter:latest
    platform: linux/arm64
    container_name: oracle-node-exporter-arm64
    restart: always
    ports:
      - "127.0.0.1:9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.disable-defaults'
      - '--collector.cpu'
      - '--collector.diskstats'
      - '--collector.filesystem'
      - '--collector.loadavg'
      - '--collector.meminfo'
      - '--collector.netdev'
      - '--collector.stat'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - aiswarm
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

  # Watchtower - Auto-updates (ARM64 native)
  watchtower:
    image: containrrr/watchtower:latest
    platform: linux/arm64
    container_name: oracle-watchtower-arm64
    restart: always
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_SCHEDULE: "0 0 4 * * *"  # 4 AM daily
      WATCHTOWER_TIMEOUT: 30s
      WATCHTOWER_NOTIFICATIONS: shoutrrr
      WATCHTOWER_NOTIFICATION_URL: ${DISCORD_WEBHOOK_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - aiswarm
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-swarm/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-swarm/data/redis
  litellm_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-swarm/logs/litellm
  openwebui_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-swarm/data/openwebui
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-swarm/data/grafana
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-swarm/data/prometheus
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ai-swarm/logs/nginx

networks:
  aiswarm:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-aiswarm
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1