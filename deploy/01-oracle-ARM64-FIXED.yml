# ARM64 DEPLOYMENT FIXED - AI SWARM ORACLE NODE
# Oracle Cloud Free Tier (ARM64) - All compatibility issues resolved
version: '3.8'

services:
  # âœ… FULLY COMPATIBLE SERVICES
  postgres:
    image: postgres:15-alpine
    platform: linux/arm64
    container_name: oracle-postgres-arm64
    restart: always
    environment:
      POSTGRES_DB: litellm
      POSTGRES_USER: litellm
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5432:5432"  # Expose for replication from Railway
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgresql-arm64.conf:/var/lib/postgresql/data/postgresql.conf
      - ./config/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
      - ./scripts/create_replication_user.sql:/docker-entrypoint-initdb.d/create_replication_user.sql
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U litellm -d litellm"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-master:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: oracle-redis-master
    restart: always
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./config/redis-master.conf:/etc/redis/redis.conf
    networks:
      aiswarm:
        ipv4_address: 172.20.0.2
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_master_pass_2025", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-sentinel-oracle:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: oracle-redis-sentinel
    restart: always
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./config/sentinel.conf:/etc/redis/sentinel.conf
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD", "redis-cli", "--sentinel", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis-master

  # HashiCorp Vault for Secrets Management - Central on Oracle
  vault:
    image: vault:1.15.4
    platform: linux/arm64
    container_name: oracle-vault
    restart: always
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/file
      - ./config/vault-server.hcl:/etc/vault/config.hcl
    environment:
      VAULT_ADDR: 'http://127.0.0.1:8200'
    ports:
      - "8200:8200"
    command: vault server -config=/etc/vault/config.hcl
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # LiteLLM Gateway - FULLY WORKING with proper health checks
  vault-agent:
    image: vault:1.15.4
    platform: linux/arm64
    container_name: litellm-vault-agent
    restart: always
    volumes:
      - ./config/vault-agent.hcl:/vault/agent.hcl
      - ./config/secrets-template.ctmpl:/local/secrets.ctmpl
      - ./secrets:/secrets
    cap_add:
      - IPC_LOCK
    command: vault agent -config=/vault/agent.hcl
    networks:
      - aiswarm
    depends_on:
      - vault

  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    platform: linux/arm64
    container_name: oracle-litellm-arm64
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    ports:
      - "4000:4000"
      - "4001:4001"  # Separate health port
    environment:
      - DATABASE_URL=postgresql://litellm:{{ with secret "secret/db/password" }}{{ .Data.data.password }}{{ end }}@postgres:5432/litellm
      - LITELLM_MASTER_KEY={{ with secret "secret/litellm/master_key" }}{{ .Data.data.key }}{{ end }}
      - REDIS_URL=sentinel://default:redis_master_pass_2025@redis-sentinel-oracle:26379/0?sentinel=yes&sentinel_master=aiswarm-master
      - STORE_MODEL_IN_DB=true
      - LITELLM_LOG=INFO
      # Health check separation for production
      - SEPARATE_HEALTH_APP=1
      - SEPARATE_HEALTH_PORT=4001
      # Enable caching and budget management
      - cache_responses=true
      - BUDGET_MANAGER=true
    volumes:
      - ./config/litellm-config.yaml:/app/config.yaml:ro
      - ./secrets:/secrets
    networks:
      - aiswarm
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      redis-sentinel-oracle:
        condition: service_healthy
      vault-agent:
        condition: service_started
    entrypoint: ["/bin/sh", "-c", "source /secrets/secrets.env && exec python /app/main.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ðŸ”§ FIXED: NODE EXPORTER - ARM64 COMPATIBLE CONFIGURATION
  node-exporter:
    image: prom/node-exporter:latest
    platform: linux/arm64
    container_name: oracle-monitor-arm64
    restart: always
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--web.listen-address=0.0.0.0:9100'
      - '--web.max-requests=40'
      # Removed incompatible flags: --web.enable-lifecycle, --web.enable-admin-api
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/rootfs:ro'
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ðŸ”§ FIXED: OPEN WEBUI - SERVICE MODE CONFIGURATION
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    platform: linux/arm64
    container_name: oracle-webui-arm64
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    ports:
      - "3000:8080"
    environment:
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - OLLAMA_BASE_URL=http://litellm:4000/v1
      - OPENAI_API_BASE_URL=http://litellm:4000/v1
      - OPENAI_API_KEY=${LITELLM_MASTER_KEY}
      - ENABLE_COMMUNITY_SHARING=false
      - ENABLE_SIGNUP=true
    volumes:
      - open_webui_data:/app/backend/data
    networks:
      - aiswarm
    depends_on:
      litellm:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ðŸ”§ FIXED: PIPELINES - ARM64 OPTIMIZED CONFIGURATION
  pipelines:
    image: ghcr.io/open-webui/pipelines:main
    platform: linux/arm64
    container_name: oracle-pipelines-arm64
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    ports:
      - "9099:9099"
    environment:
      - PIPELINES_PORT=9099
      - PIPELINES_OPENAI_API_BASE_URL=http://litellm:4000/v1
      - PIPELINES_OPENAI_API_KEY=${LITELLM_MASTER_KEY}
      - NODE_ENV=production
      - PIP_NO_CACHE_DIR=1
      # ARM64 optimization
      - PYTHONOPTIMIZE=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - pipelines_data:/app/data
    networks:
      - aiswarm
    depends_on:
      litellm:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9099/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  open_webui_data:
    driver: local
  pipelines_data:
    driver: local
  vault_data:
    driver: local
  vault_data:
    driver: local

networks:
  aiswarm:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ARM64 Resource Limits for Oracle Free Tier (4 cores, 24GB RAM)
x-common-limits: &common-limits
  deploy:
    resources:
      limits:
        cpus: '1.0'
        memory: 4G
      reservations:
        cpus: '0.5'
        memory: 1G

# Resource limits applied inline above
