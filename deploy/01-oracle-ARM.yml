# Oracle ARM Node - ARM64 Compatible Services Only
# Deploy to: 100.96.197.84
# CRITICAL: All images MUST be ARM64/aarch64 compatible

version: '3.8'

services:
  # PostgreSQL - ARM64 compatible
  postgres:
    image: arm64v8/postgres:15-alpine  # ARM64 specific image
    container_name: oracle-postgres
    restart: always
    user: "postgres:postgres"  # Non-root user
    environment:
      POSTGRES_DB: litellm
      POSTGRES_USER: litellm
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U litellm"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID

  # Redis - ARM64 compatible
  redis:
    image: arm64v8/redis:7-alpine  # ARM64 specific image
    container_name: oracle-redis
    restart: always
    user: "redis:redis"  # Non-root user
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --protected-mode yes
      --port 6379
      --bind 0.0.0.0
    volumes:
      - redis_data:/data
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Consul - Service Discovery (ARM64 compatible)
  consul:
    image: arm64v8/consul:latest  # ARM64 specific image
    container_name: oracle-consul
    restart: always
    ports:
      - "100.96.197.84:8500:8500"
    environment:
      CONSUL_BIND_INTERFACE: eth0
      CONSUL_CLIENT_INTERFACE: eth0
    command: agent -server -bootstrap -ui -client=0.0.0.0
    volumes:
      - consul_data:/consul/data
    networks:
      - aiswarm
    security_opt:
      - no-new-privileges:true

  # HAProxy - Load Balancer (ARM64 compatible)
  haproxy:
    image: arm64v8/haproxy:2.8-alpine  # ARM64 specific image
    container_name: oracle-haproxy
    restart: always
    ports:
      - "100.96.197.84:80:80"
      - "100.96.197.84:443:443"
      - "100.96.197.84:8888:8888"  # Stats page
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./certs:/etc/ssl/certs:ro
    networks:
      - aiswarm
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # LiteLLM Gateway - TESTING REQUIRED for ARM64
  litellm:
    # WARNING: ARM64 support unknown - may need to build from source
    build:
      context: ./build/litellm
      dockerfile: Dockerfile.arm64
    container_name: oracle-litellm
    restart: always
    user: "1000:1000"  # Non-root user
    ports:
      - "100.96.197.84:4000:4000"
    environment:
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY}
      DATABASE_URL: postgresql://litellm:${POSTGRES_PASSWORD}@postgres:5432/litellm?sslmode=require
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      STORE_MODEL_IN_DB: true
      LITELLM_MODE: PRODUCTION
      CUSTOM_VLLM_BASE: http://100.72.73.3:8000/v1
      CUSTOM_THANOS_BASE: http://100.122.12.54:8002/v1
      # Vault integration for API keys
      VAULT_ADDR: http://vault:8200
      VAULT_ROLE_ID: ${VAULT_ROLE_ID}
      VAULT_SECRET_ID: ${VAULT_SECRET_ID}
      VAULT_PATH: secret/api-keys
      VAULT_USE_TOKEN: false  # Use AppRole auth
    volumes:
      - ./config/litellm.yaml:/app/config.yaml:ro
      - litellm_logs:/app/logs
    networks:
      - aiswarm
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Open WebUI - TESTING REQUIRED for ARM64
  open-webui:
    # WARNING: ARM64 support unknown - may need alternative
    build:
      context: ./build/open-webui
      dockerfile: Dockerfile.arm64
    container_name: oracle-open-webui
    restart: always
    user: "1000:1000"  # Non-root user
    ports:
      - "100.96.197.84:3000:8080"
    environment:
      WEBUI_NAME: AI Swarm Control Center
      OPENAI_API_BASE_URL: http://litellm:4000/v1
      OPENAI_API_KEY: ${LITELLM_MASTER_KEY}
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY}
      ENABLE_SIGNUP: false
      DEFAULT_MODELS: phi-3-mini,mistral-7b,mixtral-8x7b
    volumes:
      - open_webui_data:/app/backend/data
    networks:
      - aiswarm
    depends_on:
      - litellm
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Grafana - Monitoring Dashboard (ARM64 compatible)
  grafana:
    image: grafana/grafana:latest  # Multi-arch image
    container_name: oracle-grafana
    restart: always
    user: "472:472"  # Grafana user
    ports:
      - "100.96.197.84:3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource,prometheus
      GF_SERVER_ROOT_URL: http://100.96.197.84:3001
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    networks:
      - aiswarm
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Prometheus - Metrics Collection (ARM64 compatible)
  prometheus:
    image: prom/prometheus:latest  # Multi-arch image
    container_name: oracle-prometheus
    restart: always
    user: "nobody:nobody"  # Non-root user
    ports:
      - "100.96.197.84:9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - aiswarm
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # AlertManager - Alert handling
  alertmanager:
    image: prom/alertmanager:latest  # Multi-arch
    container_name: oracle-alertmanager
    restart: always
    ports:
      - "100.96.197.84:9093:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - aiswarm
    security_opt:
      - no-new-privileges:true

  # ELK Stack - Lightweight logging (Elasticsearch, Logstash, Kibana)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0  # Multi-arch
    container_name: oracle-elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # Disabled for single user
      - ES_JAVA_OPTS=-Xms512m -Xmx512m  # Lightweight
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "100.96.197.84:9200:9200"
    networks:
      - aiswarm
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: oracle-logstash
    restart: always
    volumes:
      - ./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "100.96.197.84:5044:5044"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - aiswarm

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: oracle-kibana
    restart: always
    ports:
      - "100.96.197.84:5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
      XPACK_SECURITY_ENABLED: false
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - aiswarm

  # Vault - Secrets Management (ARM64 compatible, Production Mode)
  vault:
    image: hashicorp/vault:latest  # Multi-arch image
    container_name: oracle-vault
    restart: always
    ports:
      - "100.96.197.84:8200:8200"
    command: ["server", "-config=/vault/config/config.hcl"]
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - ./config/vault/config.hcl:/vault/config/config.hcl:ro
      - ./config/certs:/vault/tls:ro  # TLS certs for secure listener
    networks:
      - aiswarm
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
postgres_data:
  driver: local
redis_data:
  driver: local
consul_data:
  driver: local
litellm_logs:
  driver: local
open_webui_data:
  driver: local
grafana_data:
  driver: local
prometheus_data:
  driver: local
vault_data:
  driver: local
elasticsearch_data:
  driver: local

networks:
aiswarm:
  driver: bridge
  ipam:
    config:
      - subnet: 172.20.0.0/24